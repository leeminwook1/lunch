import { useState, useEffect } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';

export default function Feedback() {
    const router = useRouter();
    const [feedbacks, setFeedbacks] = useState([]);
    const [currentUser, setCurrentUser] = useState(null);
    const [loading, setLoading] = useState(false);
    const [modal, setModal] = useState({ isOpen: false, type: '', title: '', message: '', onConfirm: null });
    const [isAdmin, setIsAdmin] = useState(false);
    
    // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏÉÅÌÉú
    const [currentPage, setCurrentPage] = useState(1);
    const itemsPerPage = 10;
    
    // ÌîºÎìúÎ∞± ÏûëÏÑ± ÏÉÅÌÉú
    const [newFeedback, setNewFeedback] = useState({
        type: 'feature_request',
        title: '',
        content: '',
        priority: 'medium'
    });
    
    // ÌïÑÌÑ∞ ÏÉÅÌÉú
    const [filterType, setFilterType] = useState('all');
    const [filterStatus, setFilterStatus] = useState('all');

    // Í¥ÄÎ¶¨Ïûê Í¥ÄÎ†® ÏÉÅÌÉú
    const [editingFeedback, setEditingFeedback] = useState(null);
    const [adminReply, setAdminReply] = useState('');
    const [newStatus, setNewStatus] = useState('');

    // API Ìò∏Ï∂ú Ìï®Ïàò
    const apiCall = async (endpoint, options = {}) => {
        try {
            const response = await fetch(endpoint, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return await response.json();
        } catch (error) {
            console.error('API Ìò∏Ï∂ú Ïò§Î•ò:', error);
            showModal('error', 'Ïò§Î•ò', `API Ìò∏Ï∂ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`);
            throw error;
        }
    };

    // Î™®Îã¨ Ìï®Ïàò
    const showModal = (type, title, message, onConfirm = null) => {
        setModal({ isOpen: true, type, title, message, onConfirm });
    };

    const closeModal = () => {
        setModal({ isOpen: false, type: '', title: '', message: '', onConfirm: null });
    };

    const confirmModal = () => {
        if (modal.onConfirm) {
            modal.onConfirm();
        }
        closeModal();
    };

    // Îç∞Ïù¥ÌÑ∞ Î°úÎî©
    useEffect(() => {
        const initializeData = async () => {
            try {
                // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î≥µÏõê
                const savedUserId = localStorage.getItem('currentUserId');
                const savedUserName = localStorage.getItem('currentUserName');
                
                if (savedUserId && savedUserName) {
                    const userResult = await apiCall('/api/users', {
                        method: 'POST',
                        body: JSON.stringify({ name: savedUserName })
                    });
                    
                    if (userResult.success) {
                        setCurrentUser(userResult.data);
                        setIsAdmin(userResult.data.role === 'admin');
                    }
                }

                await loadFeedbacks();
            } catch (error) {
                console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®:', error);
            }
        };

        initializeData();
    }, []);

    // ÌîºÎìúÎ∞± Î°úÎî©
    const loadFeedbacks = async () => {
        try {
            setLoading(true);
            const params = new URLSearchParams();
            
            if (filterType !== 'all') {
                params.append('type', filterType);
            }
            if (filterStatus !== 'all') {
                params.append('status', filterStatus);
            }
            
            const queryString = params.toString();
            const url = queryString ? `/api/feedback?${queryString}` : '/api/feedback';
            
            const result = await apiCall(url);
            if (result.success) {
                setFeedbacks(result.data);
                setCurrentPage(1);
            }
        } catch (error) {
            console.error('ÌîºÎìúÎ∞± Î°úÎî© Ïã§Ìå®:', error);
        } finally {
            setLoading(false);
        }
    };

    // ÌîºÎìúÎ∞± ÏûëÏÑ±
    const submitFeedback = async () => {
        if (!currentUser) {
            showModal('error', 'Ïò§Î•ò', 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
            return;
        }

        if (!newFeedback.title.trim() || !newFeedback.content.trim()) {
            showModal('error', 'ÏûÖÎ†• Ïò§Î•ò', 'Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        try {
            setLoading(true);
            const result = await apiCall('/api/feedback', {
                method: 'POST',
                body: JSON.stringify({
                    userId: currentUser._id,
                    userName: currentUser.name,
                    type: newFeedback.type,
                    title: newFeedback.title.trim(),
                    content: newFeedback.content.trim(),
                    priority: newFeedback.priority
                })
            });

            if (result.success) {
                showModal('success', 'ÌîºÎìúÎ∞± ÏûëÏÑ± ÏôÑÎ£å', 'ÌîºÎìúÎ∞±Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏûëÏÑ±ÎêòÏóàÏäµÎãàÎã§!');
                setNewFeedback({
                    type: 'feature_request',
                    title: '',
                    content: '',
                    priority: 'medium'
                });
                await loadFeedbacks();
            }
        } catch (error) {
            console.error('ÌîºÎìúÎ∞± ÏûëÏÑ± Ïã§Ìå®:', error);
        } finally {
            setLoading(false);
        }
    };

    // ÌîºÎìúÎ∞± ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (Í¥ÄÎ¶¨ÏûêÎßå)
    const updateFeedbackStatus = async (feedbackId, status, reply = '') => {
        if (!isAdmin) {
            showModal('error', 'Í∂åÌïú ÏóÜÏùå', 'Í¥ÄÎ¶¨ÏûêÎßå ÌîºÎìúÎ∞± ÏÉÅÌÉúÎ•º Î≥ÄÍ≤ΩÌï† Ïàò ÏûàÏäµÎãàÎã§.');
            return;
        }

        try {
            setLoading(true);
            const result = await apiCall(`/api/feedback/${feedbackId}`, {
                method: 'PUT',
                body: JSON.stringify({
                    status,
                    adminReply: reply,
                    adminId: currentUser._id
                })
            });

            if (result.success) {
                showModal('success', 'ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å', 'ÌîºÎìúÎ∞± ÏÉÅÌÉúÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§!');
                setEditingFeedback(null);
                setAdminReply('');
                setNewStatus('');
                await loadFeedbacks();
            }
        } catch (error) {
            console.error('ÌîºÎìúÎ∞± ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
        } finally {
            setLoading(false);
        }
    };

    // ÌîºÎìúÎ∞± ÏÇ≠Ï†ú (Í¥ÄÎ¶¨ÏûêÎßå)
    const deleteFeedback = async (feedbackId) => {
        if (!isAdmin) {
            showModal('error', 'Í∂åÌïú ÏóÜÏùå', 'Í¥ÄÎ¶¨ÏûêÎßå ÌîºÎìúÎ∞±ÏùÑ ÏÇ≠Ï†úÌï† Ïàò ÏûàÏäµÎãàÎã§.');
            return;
        }

        showModal('confirm', 'ÌîºÎìúÎ∞± ÏÇ≠Ï†ú', 'Ï†ïÎßêÎ°ú Ïù¥ ÌîºÎìúÎ∞±ÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?', async () => {
            try {
                setLoading(true);
                const result = await apiCall(`/api/feedback/${feedbackId}`, {
                    method: 'DELETE'
                });

                if (result.success) {
                    showModal('success', 'ÏÇ≠Ï†ú ÏôÑÎ£å', 'ÌîºÎìúÎ∞±Ïù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§!');
                    await loadFeedbacks();
                }
            } catch (error) {
                console.error('ÌîºÎìúÎ∞± ÏÇ≠Ï†ú Ïã§Ìå®:', error);
            } finally {
                setLoading(false);
            }
        });
    };

    // ÌïÑÌÑ∞ Î≥ÄÍ≤Ω Ïãú ÌîºÎìúÎ∞± Îã§Ïãú Î°úÎî©
    useEffect(() => {
        loadFeedbacks();
    }, [filterType, filterStatus]);

    // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Í≥ÑÏÇ∞
    const totalPages = Math.ceil(feedbacks.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const paginatedFeedbacks = feedbacks.slice(startIndex, startIndex + itemsPerPage);

    // ÌîºÎìúÎ∞± ÌÉÄÏûÖ Îß§Ìïë
    const typeMap = {
        feature_request: { emoji: 'üí°', label: 'Í∏∞Îä• ÏöîÏ≤≠', color: 'var(--primary-500)' },
        bug_report: { emoji: 'üêõ', label: 'Î≤ÑÍ∑∏ Ïã†Í≥†', color: 'var(--error-500)' },
        improvement: { emoji: '‚ö°', label: 'Í∞úÏÑ† Ï†úÏïà', color: 'var(--warning-500)' },
        general: { emoji: 'üí¨', label: 'ÏùºÎ∞ò ÏùòÍ≤¨', color: 'var(--gray-500)' }
    };

    // ÏÉÅÌÉú Îß§Ìïë
    const statusMap = {
        pending: { emoji: '‚è≥', label: 'ÎåÄÍ∏∞Ï§ë', color: 'var(--warning-500)' },
        in_progress: { emoji: 'üîÑ', label: 'ÏßÑÌñâÏ§ë', color: 'var(--primary-500)' },
        completed: { emoji: '‚úÖ', label: 'ÏôÑÎ£å', color: 'var(--success-500)' },
        rejected: { emoji: '‚ùå', label: 'Í±∞Ï†à', color: 'var(--error-500)' }
    };

    // Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏
    const Modal = () => {
        if (!modal.isOpen) return null;

        return (
            <div className="modal-overlay" onClick={closeModal}>
                <div className="modal-content" onClick={e => e.stopPropagation()}>
                    <div className={`modal-header ${modal.type}`}>
                        <h3>{modal.title}</h3>
                    </div>
                    <div className="modal-body">
                        <p>{modal.message}</p>
                    </div>
                    <div className="modal-footer">
                        {modal.type === 'confirm' ? (
                            <>
                                <button className="modal-btn cancel" onClick={closeModal}>Ï∑®ÏÜå</button>
                                <button className="modal-btn confirm" onClick={confirmModal}>ÌôïÏù∏</button>
                            </>
                        ) : (
                            <button className="modal-btn confirm" onClick={closeModal}>ÌôïÏù∏</button>
                        )}
                    </div>
                </div>
            </div>
        );
    };

    return (
        <>
            <Head>
                <title>ÌîºÎìúÎ∞± - Ï†êÏã¨Î©îÎâ¥ ÏÑ†ÌÉùÍ∏∞</title>
                <meta name="description" content="ÏùòÍ≤¨ÏùÑ ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî!" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className="app">
                <div className="container">
                    {/* Ìó§Îçî */}
                    <header className="header subpage-header">
                        <div className="header-content">
                            <div className="header-left">
                                <button 
                                    onClick={() => router.push('/')}
                                    className="btn-back"
                                >
                                    ‚Üê ÎèåÏïÑÍ∞ÄÍ∏∞
                                </button>
                                <h1 className="title">üìù ÌîºÎìúÎ∞±</h1>
                                {currentUser && (
                                    <div className="user-info">
                                        <span className="user-greeting">ÏïàÎÖïÌïòÏÑ∏Ïöî, <strong>{currentUser.name}</strong>Îãò!</span>
                                        {isAdmin && <span className="admin-badge">Í¥ÄÎ¶¨Ïûê</span>}
                                    </div>
                                )}
                            </div>
                        </div>
                    </header>

                    {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
                    <main className="main-content">
                        {/* ÌîºÎìúÎ∞± ÏûëÏÑ± ÏÑπÏÖò */}
                        {currentUser && (
                            <section className="feedback-write-section">
                                <div className="section-header">
                                    <h2>‚úçÔ∏è ÌîºÎìúÎ∞± ÏûëÏÑ±</h2>
                                    <p>ÏÑúÎπÑÏä§ Í∞úÏÑ†ÏùÑ ÏúÑÌïú ÏÜåÏ§ëÌïú ÏùòÍ≤¨ÏùÑ ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî!</p>
                                </div>
                                
                                <div className="feedback-form">
                                    <div className="form-row">
                                        <div className="input-group">
                                            <label htmlFor="feedback-type">ÌîºÎìúÎ∞± Ïú†Ìòï</label>
                                            <select
                                                id="feedback-type"
                                                value={newFeedback.type}
                                                onChange={(e) => setNewFeedback(prev => ({ ...prev, type: e.target.value }))}
                                                className="feedback-select"
                                            >
                                                <option value="feature_request">üí° Í∏∞Îä• ÏöîÏ≤≠</option>
                                                <option value="bug_report">üêõ Î≤ÑÍ∑∏ Ïã†Í≥†</option>
                                                <option value="improvement">‚ö° Í∞úÏÑ† Ï†úÏïà</option>
                                                <option value="general">üí¨ ÏùºÎ∞ò ÏùòÍ≤¨</option>
                                            </select>
                                        </div>

                                        <div className="input-group">
                                            <label htmlFor="feedback-priority">Ïö∞ÏÑ†ÏàúÏúÑ</label>
                                            <select
                                                id="feedback-priority"
                                                value={newFeedback.priority}
                                                onChange={(e) => setNewFeedback(prev => ({ ...prev, priority: e.target.value }))}
                                                className="feedback-select"
                                            >
                                                <option value="low">üü¢ ÎÇÆÏùå</option>
                                                <option value="medium">üü° Î≥¥ÌÜµ</option>
                                                <option value="high">üî¥ ÎÜíÏùå</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div className="input-group">
                                        <label htmlFor="feedback-title">Ï†úÎ™©</label>
                                        <input
                                            id="feedback-title"
                                            type="text"
                                            value={newFeedback.title}
                                            onChange={(e) => setNewFeedback(prev => ({ ...prev, title: e.target.value }))}
                                            placeholder="ÌîºÎìúÎ∞± Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                            className="feedback-input"
                                            maxLength={100}
                                        />
                                        <div className="char-count">
                                            {newFeedback.title.length}/100
                                        </div>
                                    </div>

                                    <div className="input-group">
                                        <label htmlFor="feedback-content">ÎÇ¥Ïö©</label>
                                        <textarea
                                            id="feedback-content"
                                            value={newFeedback.content}
                                            onChange={(e) => setNewFeedback(prev => ({ ...prev, content: e.target.value }))}
                                            placeholder="ÏûêÏÑ∏Ìïú ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî..."
                                            className="feedback-textarea"
                                            rows={6}
                                            maxLength={1000}
                                        />
                                        <div className="char-count">
                                            {newFeedback.content.length}/1000
                                        </div>
                                    </div>

                                    <div className="form-actions">
                                        <button 
                                            onClick={submitFeedback}
                                            disabled={loading || !newFeedback.title.trim() || !newFeedback.content.trim()}
                                            className="btn-submit-feedback"
                                        >
                                            {loading ? 'ÏûëÏÑ± Ï§ë...' : 'üìù ÌîºÎìúÎ∞± ÏûëÏÑ±'}
                                        </button>
                                    </div>
                                </div>
                            </section>
                        )}

                        {/* ÌîºÎìúÎ∞± Î™©Î°ù ÏÑπÏÖò */}
                        <section className="feedback-list-section">
                            <div className="section-header">
                                <h2>üí¨ ÌîºÎìúÎ∞± Î™©Î°ù</h2>
                                <span className="count-badge">{feedbacks.length}Í∞ú</span>
                            </div>

                            {/* ÌïÑÌÑ∞ */}
                            <div className="feedback-filters">
                                <select
                                    value={filterType}
                                    onChange={(e) => setFilterType(e.target.value)}
                                    className="filter-select"
                                >
                                    <option value="all">Ï†ÑÏ≤¥ Ïú†Ìòï</option>
                                    <option value="feature_request">üí° Í∏∞Îä• ÏöîÏ≤≠</option>
                                    <option value="bug_report">üêõ Î≤ÑÍ∑∏ Ïã†Í≥†</option>
                                    <option value="improvement">‚ö° Í∞úÏÑ† Ï†úÏïà</option>
                                    <option value="general">üí¨ ÏùºÎ∞ò ÏùòÍ≤¨</option>
                                </select>

                                <select
                                    value={filterStatus}
                                    onChange={(e) => setFilterStatus(e.target.value)}
                                    className="filter-select"
                                >
                                    <option value="all">Ï†ÑÏ≤¥ ÏÉÅÌÉú</option>
                                    <option value="pending">‚è≥ ÎåÄÍ∏∞Ï§ë</option>
                                    <option value="in_progress">üîÑ ÏßÑÌñâÏ§ë</option>
                                    <option value="completed">‚úÖ ÏôÑÎ£å</option>
                                    <option value="rejected">‚ùå Í±∞Ï†à</option>
                                </select>
                            </div>

                            {/* ÌîºÎìúÎ∞± Î™©Î°ù */}
                            <div className="feedback-list">
                                {loading ? (
                                    <div className="loading-state">
                                        <div className="spinner"></div>
                                        <p>ÌîºÎìúÎ∞±ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
                                    </div>
                                ) : paginatedFeedbacks.length > 0 ? (
                                    paginatedFeedbacks.map(feedback => (
                                        <div key={feedback._id} className="feedback-item">
                                            <div className="feedback-header">
                                                <div className="feedback-meta">
                                                    <span 
                                                        className="feedback-type"
                                                        style={{ backgroundColor: typeMap[feedback.type]?.color }}
                                                    >
                                                        {typeMap[feedback.type]?.emoji} {typeMap[feedback.type]?.label}
                                                    </span>
                                                    <span 
                                                        className="feedback-status"
                                                        style={{ backgroundColor: statusMap[feedback.status]?.color }}
                                                    >
                                                        {statusMap[feedback.status]?.emoji} {statusMap[feedback.status]?.label}
                                                    </span>
                                                    <span className="feedback-priority priority-{feedback.priority}">
                                                        {feedback.priority === 'high' ? 'üî¥' : 
                                                         feedback.priority === 'medium' ? 'üü°' : 'üü¢'}
                                                    </span>
                                                </div>
                                                <div className="feedback-actions">
                                                    <span className="feedback-date">
                                                        {new Date(feedback.createdAt).toLocaleDateString()}
                                                    </span>
                                                    {isAdmin && (
                                                        <>
                                                            <button
                                                                onClick={() => {
                                                                    setEditingFeedback(feedback);
                                                                    setNewStatus(feedback.status);
                                                                    setAdminReply(feedback.adminReply || '');
                                                                }}
                                                                className="btn-edit-feedback"
                                                                title="ÏàòÏ†ï"
                                                            >
                                                                ‚úèÔ∏è
                                                            </button>
                                                            <button
                                                                onClick={() => deleteFeedback(feedback._id)}
                                                                className="btn-delete-feedback"
                                                                title="ÏÇ≠Ï†ú"
                                                            >
                                                                üóëÔ∏è
                                                            </button>
                                                        </>
                                                    )}
                                                </div>
                                            </div>
                                            
                                            <div className="feedback-content">
                                                <h3 className="feedback-title">{feedback.title}</h3>
                                                <p className="feedback-text">{feedback.content}</p>
                                                <div className="feedback-author">
                                                    ÏûëÏÑ±Ïûê: <strong>{feedback.userName}</strong>
                                                </div>
                                            </div>

                                            {feedback.adminReply && (
                                                <div className="admin-reply">
                                                    <div className="reply-header">
                                                        <span className="reply-label">üë®‚Äçüíº Í¥ÄÎ¶¨Ïûê ÎãµÎ≥Ä</span>
                                                    </div>
                                                    <p className="reply-content">{feedback.adminReply}</p>
                                                </div>
                                            )}

                                            {/* Í¥ÄÎ¶¨Ïûê ÏàòÏ†ï Ìèº */}
                                            {isAdmin && editingFeedback?._id === feedback._id && (
                                                <div className="admin-edit-form">
                                                    <div className="edit-form-header">
                                                        <h4>Í¥ÄÎ¶¨Ïûê ÏàòÏ†ï</h4>
                                                    </div>
                                                    
                                                    <div className="input-group">
                                                        <label>ÏÉÅÌÉú Î≥ÄÍ≤Ω</label>
                                                        <select
                                                            value={newStatus}
                                                            onChange={(e) => setNewStatus(e.target.value)}
                                                            className="status-select"
                                                        >
                                                            <option value="pending">‚è≥ ÎåÄÍ∏∞Ï§ë</option>
                                                            <option value="in_progress">üîÑ ÏßÑÌñâÏ§ë</option>
                                                            <option value="completed">‚úÖ ÏôÑÎ£å</option>
                                                            <option value="rejected">‚ùå Í±∞Ï†à</option>
                                                        </select>
                                                    </div>

                                                    <div className="input-group">
                                                        <label>Í¥ÄÎ¶¨Ïûê ÎãµÎ≥Ä</label>
                                                        <textarea
                                                            value={adminReply}
                                                            onChange={(e) => setAdminReply(e.target.value)}
                                                            placeholder="ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ï†ÑÎã¨Ìï† ÎãµÎ≥ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                                                            className="admin-reply-textarea"
                                                            rows={3}
                                                        />
                                                    </div>

                                                    <div className="edit-form-actions">
                                                        <button
                                                            onClick={() => {
                                                                setEditingFeedback(null);
                                                                setAdminReply('');
                                                                setNewStatus('');
                                                            }}
                                                            className="btn-cancel-edit"
                                                        >
                                                            Ï∑®ÏÜå
                                                        </button>
                                                        <button
                                                            onClick={() => updateFeedbackStatus(feedback._id, newStatus, adminReply)}
                                                            className="btn-save-edit"
                                                            disabled={loading}
                                                        >
                                                            {loading ? 'Ï†ÄÏû• Ï§ë...' : 'Ï†ÄÏû•'}
                                                        </button>
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    ))
                                ) : (
                                    <div className="empty-state">
                                        <div className="empty-icon">üìù</div>
                                        <h4>ÌîºÎìúÎ∞±Ïù¥ ÏóÜÏäµÎãàÎã§</h4>
                                        <p>Ï≤´ Î≤àÏß∏ ÌîºÎìúÎ∞±ÏùÑ ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî!</p>
                                    </div>
                                )}
                            </div>

                            {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò */}
                            {totalPages > 1 && (
                                <div className="pagination">
                                    <button
                                        onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                                        disabled={currentPage === 1}
                                        className="pagination-btn"
                                    >
                                        ‚Üê Ïù¥Ï†Ñ
                                    </button>
                                    
                                    <span className="pagination-info">
                                        {currentPage} / {totalPages}
                                    </span>
                                    
                                    <button
                                        onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                                        disabled={currentPage === totalPages}
                                        className="pagination-btn"
                                    >
                                        Îã§Ïùå ‚Üí
                                    </button>
                                </div>
                            )}
                        </section>
                    </main>
                </div>
            </div>

            <Modal />
        </>
    );
}